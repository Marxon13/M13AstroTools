;********************************************************************;+;*NAME:;;    GRIDTERP     (General IDL Library 01) 13 March, 1983   ;;*CLASS:;;    interpolation;;*CATEGORY:;;*PURPOSE:;;    This is a linear interpolation procedure to operate properly on IUE;    data.  The flux, gross, and back vectors are interpolated, but the eps ;    vector is set to the minimum of the two relevant values.;    This routine will work fast. You can interpolate to a 3000 point;    grid in about 13 seconds when all 5 output vectors are desired, faster;    if you only care about flux and eps. The input wavelength vectors;    must be monotonically increasing, but data intervals may vary.; ;*CALLING SEQUENCE:;;    GRIDTERP,WGRID,WAVE,FLUX,EPS,GROSS,BACK; ;*PARAMETERS:;;    WGRID  (REQ) (I) (1) (F D);           Required input vector containing the wavelength grid the ;           spectral data are to be interpolated to.;           This vector must be strictly increasing.;;    WAVE   (REQ) (I/O) (1) (F D);           Required input vector containing the wavelength data of the;           spectrum which is to be interpolated. This vector must be;           strictly increasing.;;    FLUX   (REQ) (I/O) (1) (F D);           Required input vector containing the flux data of the spectrum;           which is to be interpolated.;           ;    EPS    (REQ) (I/O) (1) (I L F D);           Required input/output vector containing the data quality flags;;    GROSS  (REQ) (I/O) (1) (I L F D);           Required input/output vector containing the gross spectrum;;    BACK   (REQ) (I/O) (1) (I L F D);           Required input/output vector containing the spectral background.;;*EXAMPLES:;;    To interpolate an IUE spectrum onto a new grid,;    IUEHI,imaget,order,H,WAVE,FLUX,EPS;    GRIDTERP,WGRID,WAVE,FLUX,EPS,G,B  (G AND B ARE DUMMY PARAMS);   ;*SYSTEM VARIABLES USED:;;*INTERACTIVE INPUT:;;*SUBROUTINES CALLED:;;    PARCHECK; ;*FILES USED:;;*SIDE EFFECTS:;;    The original (uninterpolated) vectors are destroyed.;;*RESTRICTIONS:;      - Wavelength vectors must be monotonically increasing.;;*NOTES:;;      - If you don't have or desire to interpolate one of the input;         parameters, simply enter an undefined dummy parameter (or 0);         in its place and the procedure will ignore that parameter.  For;         example, say you don't have the gross or background.  In that;         case just type GRIDTERP,WGRID,WAVE,FLUX,EPS,DUMMY,DUMMY and;         only the flux and eps will be done.;      - Points outside the range of WAVE will be set to zero. Note this;         is different than the program LINTERP which sets these points;         equal to the endpoints of the input y (e.g., flux) ;         vector.;;	tested with IDL Version 2.1.0 (sunos sparc)  	20 Jun 91;	tested with IDL Version 2.1.0 (ultrix mispel)	N/A;	tested with IDL Version 2.1.0 (vms vax)      	21 Jun 91;;*PROCEDURE:;;            WAVE,FLUX,GROSS, and BACK are linearly interpolated onto the;            new WGRID.; ;            The EPS vector is not linearly interpolated, rather the;            value assigned to each grid point is the minimum of the;            eps values on either side of that point.;;;*MODIFICATION HISTORY:;;     1982          G. Seab   CU      initial program;     Mar. 13, 1983  Derryl Eckt       implemented at CURDAF;     Oct. 23, 1985  JKF  GSFC  DIDL compatible..replaced REORDER;           with vector subscripting;     Aug  11, 1986  RWT  GSFC  use NELEMENTS, and change GE to GT;           in line 39 (SMR #123);     Feb. 18, 1987  RWT  GSFC  VAX Mods: N_ELEMENTS for NELEMENTS, account;           references, total 1st 2 elements of SIZE rather than full array;     Apr. 13, 1987  RWT  GSFC  VAX Mods: add PARCHECK and remove INSERTS;     Mar. 21, 1988  CAG  GSFC  VAX RDAF-style prolog;     Jan. 03, 1990  RWT  GSFC  UNIX mods: use lower-case, use vector;           subscripts to correct error in zeroing out-of-range values,;           and modify where commands;     Jun. 21, 1991  PJL  GSFC  cleaned up; tested on SUN and VAX; ;				updated prolog;     Jun. 30, 1997  RWT  added prolog documentation;-;****************************************************************************** pro gridterp,wgrid,wave,flux,eps,gross,back; npar = n_params(0) if npar eq 0 then begin    print,' GRIDTERP,WGRID,WAVE,FLUX,EPS,GROSS,BACK'    retall endif  ; npar parcheck,n_params(0),6,'GRIDTERP' tabsize=n_elements(wave)           ; number of elements in table intsize=n_elements(wgrid)          ; number of elements in interpolated vector ; chk1=wave-shift(wave,1) chk1=(total(chk1 le 0) eq 1)*(wave(0) lt wave(tabsize-1)) chk2=wgrid-shift(wgrid,1) chk2=(total(chk2 lt 0) eq 1)*(wgrid(0) lt wgrid(intsize-1)) if (chk1*chk2) eq 0 then begin    print,' '    print,'***  ERROR in GRIDTERP  ***',string(7b)    print,' '    if chk1 eq 0 then print,' Input vector wave must be strictly increasing.'    if chk2 eq 0 then print,' Input vector wgrid must be strictly increasing.'    print,' The procedure is being aborted.'    print,string(7b)    return endif  ; (chk1*chk2);; check which input params are defined & have > 1 element; fchk = (n_elements(flux) gt 1) echk = (n_elements(eps) gt 1) gchk = (n_elements(gross) gt 1) bchk = (n_elements(back) gt 1);; if interpolation grid is completely out of range zero every yint element; if (wgrid(intsize-1) lt wave(0))+(wgrid(0) gt wave(tabsize-1)) then begin    wave=wgrid    if fchk then flux=wgrid*0    if echk then eps=wgrid*0    if gchk then gross=wgrid*0    if bchk then back=back*0    return endif  ; wgrid;; now everything is hunky dory and we are ready do get to work !; ndex=intarr(intsize)       ; ndex(i)=j  <=>  xtab(j) =< xint(i) < xtab(j+1) ; a=where(wgrid lt wave(0),outstart) a=where(wgrid le wave(tabsize-1),outstop);;  begin loop of output vectors; in=0 for out=outstart,outstop-1 do begin;   while (wgrid(out) gt wave(in+1)) and (in+1 lt tabsize-1) then in=in+1;   ndex(out) = in    while wgrid(out) gt wave(in+1) do begin       in=in+1       if in eq tabsize-1 then goto,finish    endwhile  ; wgrid    finish: ndex(out)=in endfor  ; out base= wave(ndex) bp1 = wave(ndex+1) - base xdel = (wgrid - base) / bp1 base=0 bp1=0 wave=wgrid wgrid=0;; flux vector; if fchk then begin    base= flux(ndex)    bp1 = flux(ndex+1)    flux = (bp1 - base)*xdel + base    base=0    bp1=0   ;   ;  out-of-range values are to be set to zero on output   ;    if outstart ne 0 then flux(0:outstart-1) = 0.0    if outstop lt intsize then flux(outstop:*) = 0.0 endif  ; fchk;; eps vector ; if echk then begin    base = eps(ndex)    eps  = eps(ndex+1)     ; use smallest eps value     eps  = eps < base    if outstart ne 0 then eps(0:outstart-1) = 0.0    if outstop lt intsize then eps(outstop:*) = 0.0 endif  ; echk;; gross vector ; if gchk then begin    base  = gross(ndex)    bp1   = gross(ndex+1)    gross = (bp1 - base)*xdel + base    base=0    bp1=0   ;   ;  out-of-range values are to be set to zero on output   ;    if outstart ne 0 then gross(0:outstart-1) = 0.0    if outstop lt intsize then gross(outstop:*) = 0.0 endif  ; gchk;; back vector ; if bchk then begin    base = back(ndex)    bp1  = back(ndex+1)    back = (bp1 - base)*xdel + base    base=0    bp1=0   ;   ;  out-of-range values are to be set to zero on output   ;    if outstart ne 0 then back(0:outstart-1) = 0.0    if outstop lt intsize then back(outstop:*) = 0.0 endif  ; bchk wgrid=wave return end  ; gridterp 